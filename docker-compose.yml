version: '3.8'

# Unified Docker Compose configuration for Amazon Recommendation Engine
# This file combines development and production configurations with clear documentation

services:
  # Database services
  postgres:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-recommender}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recommender_network

  # Caching service
  redis:
    image: redis:7.0-alpine
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recommender_network

  # Message queue services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    restart: always
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recommender_network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT:-9092}:9092"
      - "${KAFKA_INTERNAL_PORT:-29092}:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recommender_network

  # Monitoring services
  prometheus:
    image: prom/prometheus:v2.42.0
    restart: always
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - recommender_network

  grafana:
    image: grafana/grafana:9.4.3
    restart: always
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recommender_network

  # ML tracking service
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.3.0
    restart: always
    ports:
      - "${MLFLOW_PORT:-5001}:5000"
    environment:
      - MLFLOW_TRACKING_URI=http://localhost:5001
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
    command: mlflow server --host 0.0.0.0
    volumes:
      - mlflow_data:/mlflow
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - recommender_network

  # Recommendation API (uncomment to enable)
  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   restart: always
  #   depends_on:
  #     - postgres
  #     - redis
  #     - kafka
  #   ports:
  #     - "${API_PORT:-5050}:5050"
  #   environment:
  #     - ENVIRONMENT=${ENVIRONMENT:-development}
  #     - CONFIG_FILE=${CONFIG_FILE:-config/config.yaml}
  #     - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-recommender}
  #     - REDIS_URL=redis://redis:6379/0
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
  #     - MODEL_PATH=${MODEL_PATH:-/app/data/models}
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #   volumes:
  #     - ./:/app
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5050/api/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - recommender_network

volumes:
  postgres_data:
  redis_data:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  prometheus_data:
  grafana_data:
  mlflow_data:

networks:
  recommender_network:
    driver: bridge 