#!/usr/bin/env python3
"""
Start all services for the Amazon Recommendation Engine.

This script starts the API and frontend servers in separate processes.
"""

import subprocess
import time
import os
import signal
import sys
from pathlib import Path

# Get the absolute path to the project root
PROJECT_ROOT = Path(__file__).parent.parent.absolute()

# Service commands - using run_api.py instead of src/api/app.py directly
API_COMMAND = ["python", str(PROJECT_ROOT / "run_api.py")]
FRONTEND_COMMAND = ["python", str(PROJECT_ROOT / "src" / "frontend" / "serve.py")]

# Process list
processes = []

def check_postgres_available():
    """Check if PostgreSQL is available."""
    try:
        # Import necessary modules
        import psycopg2
        
        # Try to connect to PostgreSQL
        connection = psycopg2.connect(
            host="localhost",
            port=5432,
            user="postgres",
            password="postgres",
            database="postgres",
            connect_timeout=3
        )
        connection.close()
        return True
    except Exception as e:
        print(f"PostgreSQL check failed: {e}")
        print("Skipping database initialization. Some features may not work properly.")
        return False

def patch_database_module():
    """Patch the database module to avoid connection errors."""
    if not check_postgres_available():
        # Create a patch file that will prevent database initialization
        patch_file = PROJECT_ROOT / "src" / "data" / "_db_patch.py"
        with open(patch_file, "w") as f:
            f.write("""
# This file is automatically generated to patch the database connection
# when PostgreSQL is not available

def mock_init_db():
    \"\"\"Mock implementation of init_db that doesn't connect to the database.\"\"\"
    print("DATABASE PATCHED: Using mock database initialization")
    return True

# Monkey patch the real init_db with our mock version
import sys
import importlib.util
try:
    # Try to import the real database module
    spec = importlib.util.find_spec('src.data.database')
    if spec:
        database = importlib.util.module_from_spec(spec)
        sys.modules['src.data.database'] = database
        spec.loader.exec_module(database)
        
        # Replace the real init_db with our mock version
        database.init_db = mock_init_db
        print("DATABASE PATCHED: Successfully patched database module")
except Exception as e:
    print(f"DATABASE PATCHED: Error patching database module: {e}")
""")
        print(f"Created database patch file at {patch_file}")
        return True
    return False

def set_kafka_env():
    """Set environment variables for Kafka."""
    os.environ["KAFKA_BOOTSTRAP_SERVERS"] = "localhost:29092"
    print("Set KAFKA_BOOTSTRAP_SERVERS=localhost:29092")

def start_service(name, command):
    """Start a service in a subprocess."""
    print(f"Starting {name}...")
    process = subprocess.Popen(
        command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1,
        cwd=PROJECT_ROOT,
        env=os.environ.copy()  # Pass current environment with Kafka settings
    )
    
    # Add to process list
    processes.append((name, process))
    print(f"{name} started with PID {process.pid}")
    return process

def log_output():
    """Monitor and log output from all processes."""
    try:
        while True:
            for name, process in processes:
                while True:
                    line = process.stdout.readline()
                    if not line:
                        break
                    print(f"[{name}] {line.strip()}")
            
            # Check if all processes are still running
            all_running = True
            for name, process in processes:
                if process.poll() is not None:
                    print(f"{name} has exited with code {process.returncode}")
                    all_running = False
            
            if not all_running:
                print("One or more services have stopped. Shutting down...")
                shutdown()
                break
            
            time.sleep(0.1)
    except KeyboardInterrupt:
        print("\nReceived interrupt signal. Shutting down...")
        shutdown()

def shutdown():
    """Shutdown all running processes."""
    for name, process in processes:
        if process.poll() is None:  # Process is still running
            print(f"Stopping {name} (PID {process.pid})...")
            process.terminate()
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                print(f"Force killing {name}...")
                process.kill()
    
    print("All services stopped.")
    sys.exit(0)

def main():
    """Start all services and monitor their output."""
    print("Starting Amazon Recommendation Engine services...")
    print("API will be available at: http://localhost:5050")
    print("Frontend will be available at: http://localhost:8000")
    
    # Check and patch database if needed
    patch_database_module()
    
    # Set Kafka environment variables
    set_kafka_env()
    
    # Register signal handlers
    signal.signal(signal.SIGINT, lambda sig, frame: shutdown())
    signal.signal(signal.SIGTERM, lambda sig, frame: shutdown())
    
    # Start API
    start_service("API", API_COMMAND)
    
    # Wait for API to initialize before starting frontend
    time.sleep(2)
    
    # Start Frontend
    start_service("Frontend", FRONTEND_COMMAND)
    
    print("\nAll services started!")
    print("Press Ctrl+C to stop all services.\n")
    
    # Monitor and log output
    log_output()

if __name__ == "__main__":
    main() 